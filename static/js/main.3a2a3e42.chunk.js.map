{"version":3,"sources":["component/search-box/search-box.component.jsx","component/card/card.component.jsx","component/card-list/card-list.component.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBox","placeholder","handleChange","className","type","onChange","Card","props","src","monster","id","alt","name","email","CardList","monsters","map","key","App","state","searchField","fetch","result","json","data","this","setState","filteredMonsters","filter","toLowerCase","includes","txt","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uWAIaA,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOC,UAAU,SAASC,KAAM,SAASH,YAAaA,EAAaI,SAAUH,MCFpEI,G,YAAO,SAAAC,GAAK,OACrB,yBAAKJ,UAAW,kBACZ,yBACIK,IAAG,+BAA0BD,EAAME,QAAQC,GAAxC,0BACHC,IAAI,YAER,4BAAKJ,EAAME,QAAQG,MACnB,2BAAIL,EAAME,QAAQI,UCLbC,EAAW,SAAAP,GAAK,OACzB,yBAAKJ,UAAW,aACXI,EAAMQ,SAASC,KAAI,SAAAP,GAAO,OACvB,kBAAC,EAAD,CAAMQ,IAAMR,EAAQC,GAAID,QAAUA,SC6B/BS,G,kBA/Bb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXJ,SAAU,GACVK,YAAa,IALH,E,mNAUSC,MAAM,8C,cAArBC,E,gBACaA,EAAOC,O,OAApBC,E,OACLC,KAAKC,SAAS,CAAEX,SAAUS,I,qIAInB,IAAD,SACyBC,KAAKN,MAA9BJ,EADA,EACAA,SAAUK,EADV,EACUA,YACXO,EAAmBZ,EAASa,QAAO,SAAAnB,GAAO,OAAIA,EAAQG,KAAKiB,cAAcC,SAASV,EAAYS,kBACpG,OACE,yBAAK1B,UAAU,OACb,gDACA,kBAAC,EAAD,CAAWF,YAAa,kBAAkBC,aAAc,SAAA6B,GAAG,OAAI,EAAKL,SAAS,CAACN,YAAaW,EAAIC,OAAOC,WACtG,kBAAC,EAAD,CAAUlB,SAAWY,S,GAxBXO,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3a2a3e42.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className='search' type= 'search' placeholder={placeholder} onChange={handleChange} />\r\n)\r\n","import React from 'react';\r\nimport './card.style.css'\r\n\r\nexport const Card = props => (\r\n    <div className= 'card-container'>\r\n        <img \r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} \r\n            alt=\"monster\"\r\n        />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport './card-list.style.css';\r\nimport { Card } from '../card/card.component';\r\n\r\n\r\nexport const CardList = props => (         \r\n    <div className= 'card-list'>\r\n        {props.monsters.map(monster => (\r\n            <Card key= {monster.id} monster= {monster} />\r\n        ))}\r\n    </div> \r\n    \r\n);\r\n","import React, {Component} from 'react';\r\nimport {SearchBox} from './component/search-box/search-box.component'\r\nimport {CardList} from './component/card-list/card-list.component'\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      monsters: [],\r\n      searchField: '',\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    const result = await fetch('https://jsonplaceholder.typicode.com/users');\r\n    const data = await result.json();\r\n     this.setState({ monsters: data});\r\n  }\r\n  \r\n  \r\n  render() {\r\n    const {monsters, searchField} = this.state;\r\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>Monsters Rolodex</h1>\r\n        <SearchBox placeholder= 'Search Monsters' handleChange={txt => this.setState({searchField: txt.target.value})} />\r\n        <CardList monsters= {filteredMonsters} />\r\n      </div>\r\n      \r\n    )\r\n    \r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}